@use "sass:color";

:root {
  // Background
  --app-bg-color-primary: var(--color-neutral-90);
  --app-bg-color-secondary: var(--color-neutral-100);

  // States
  --app-state-color-focus: var(--color-blue);
  --app-state-color-danger: var(--color-red);

  // Border
  --app-border-color: var(--color-neutral-50);
  --app-border-color-focus: var(--app-state-color--focus);
  --app-border-color-invalid: var(--app-state-color--danger);

  // Text colors
  --app-text-primary: var(--color-neutral-10);
  --app-text-secondary: var(--color-neutral-25);
  --app-text-invalid: var(--app-state-color-danger);
}

// Force the body element to primary color for theme.
html {
  body {
    background: var(--bg-color-primary);
    color: var(--color-neutral-10);
  }
}

// Text
$html-font-size: 16px;

@function stripUnit($value) {
  @return $value / ($value * 0 + 1);
}

@function rem($pxValue) {
  @return #{stripUnit($pxValue) / stripUnit($html-font-size)}rem;
}

$textSizes: (
  'xs': rem(12px),
  's': rem(14px),
  'm': rem(16px),
  'l': rem(20px),
);

$textLineHeights: (
  'xs': rem(18px),
  's': rem(22px),
  'm': rem(24px),
  'l': rem(30px),
);

@function convertRGB($color) {
  @return unquote('#{red($color)}, #{green($color)}, #{blue($color)}');
}

@each $name, $lineHeight in $textLineHeights {
  $varName: --text-line-#{$name};

  :root {
    #{$varName}: #{$lineHeight};
  }
}

@each $name, $size in $textSizes {
  $varName: --text-size-#{$name};

  :root {
    #{$varName}: #{$size};
  }
}

@mixin text($name) {
  font-size: var(--text-size-#{$name});
  line-height: var(--text-line-#{$name});

  @if ($name == 'xs') {
    color: var(--color-neutral-25);
    text-transform: uppercase;
  }
}

@each $name, $size in $textSizes {
  .text-#{$name} {
    @include text($name);
  }
}

// Colors
$colors: (
  'green': (
    base: #34aa44,
  ),
  'blue': (
    base: #1665d8,
  ),
  'purple': (
    base: #6758f3,
  ),
  'orange': (
    base: #f6ab2f,
  ),
  'red': (
    base: #e73c1e,
  ),
);

$neutrals: (
  'neutral-0': (
    base: #000,
  ),
  'neutral-10': (
    base: #3e3f42,
  ),
  'neutral-25': (
    base: #9ea0a5,
  ),
  'neutral-50': (
    base: #eaedf3,
  ),
  'neutral-90': (
    base: #fbfbfd,
  ),
  'neutral-100': (
    base: #fff,
  ),
);

@each $name, $color in $colors {
  $varName: --color-#{$name};

  $baseColor: map-get($color, base);

  $shadeColor: map-get($color, shade);
  $darkColor: map-get($color, dark);
  $tintColor: map-get($color, tint);

  :root {
    @if ($shadeColor) {
      #{$varName}-shade: $shadeColor;
    } @else {
      #{$varName}-shade: color.scale($baseColor, $lightness: -12%);
    }

    @if ($darkColor) {
      #{$varName}-dark: $darkColor;
    } @else {
      #{$varName}-dark: color.scale($baseColor, $lightness: -5%);
    }

    @if ($tintColor) {
      #{$varName}-tint: $tintColor;
    } @else {
      #{$varName}-tint: color.change($baseColor, $lightness: 80%);
    }

    #{$varName}: #{$baseColor};
    #{$varName}-rgb: convertRGB($baseColor);
  }

  .color-#{$name} {
    color: var(#{$varName});
  }
}

// Neutrals
@each $name, $neutral in $neutrals {
  $varName: --color-#{$name};

  $baseColor: map-get($neutral, base);

  :root {
    #{$varName}: #{$baseColor};
    #{$varName}-rgb: convertRGB($baseColor);
  }

  .color-#{$name} {
    color: var(#{$varName});
  }
}
